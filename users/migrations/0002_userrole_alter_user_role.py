# Generated by Django 5.1.3 on 2025-05-28 19:32

import django.db.models.deletion
import uuid
from django.db import migrations, models

def create_default_roles(apps, schema_editor):
    UserRole = apps.get_model('users', 'UserRole')
    User = apps.get_model('users', 'User')
    
    # Create default roles
    roles = {
        'admin': {
            'description': 'Administrator with full system access',
            'permissions': {
                'can_manage_users': True,
                'can_manage_roles': True,
                'can_view_analytics': True,
                'can_manage_system': True
            }
        },
        'inventory_manager': {
            'description': 'Manages inventory and stock',
            'permissions': {
                'can_manage_inventory': True,
                'can_view_stock': True,
                'can_manage_orders': True
            }
        },
        'sales_representative': {
            'description': 'Handles sales and customer relations',
            'permissions': {
                'can_manage_sales': True,
                'can_view_customers': True,
                'can_create_orders': True
            }
        },
        'farmer': {
            'description': 'Manages crops and farm operations',
            'permissions': {
                'can_manage_crops': True,
                'can_view_market_prices': True,
                'can_manage_harvest': True
            }
        },
        'b2b': {
            'description': 'Business to Business operations',
            'permissions': {
                'can_view_wholesale': True,
                'can_place_bulk_orders': True,
                'can_view_market_analytics': True
            }
        }
    }
    
    role_mapping = {}
    for role_name, role_data in roles.items():
        role = UserRole.objects.create(
            name=role_name,
            description=role_data['description'],
            permissions=role_data['permissions']
        )
        role_mapping[role_name] = role.id

    # Update existing users with new role references
    for user in User.objects.all():
        old_role = user.role
        if old_role in role_mapping:
            user.new_role_id = role_mapping[old_role]
            user.save(update_fields=['new_role'])

def reverse_roles(apps, schema_editor):
    UserRole = apps.get_model('users', 'UserRole')
    UserRole.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('permissions', models.JSONField(default=dict)),
            ],
            options={
                'verbose_name': 'User Role',
                'verbose_name_plural': 'User Roles',
                'ordering': ['name'],
            },
        ),
        # First create the new field allowing nulls
        migrations.AddField(
            model_name='user',
            name='new_role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='users', to='users.userrole'),
        ),
        # Run the data migration
        migrations.RunPython(create_default_roles, reverse_roles),
        # Remove the old role field
        migrations.RemoveField(
            model_name='user',
            name='role',
        ),
        # Rename the new field to role
        migrations.RenameField(
            model_name='user',
            old_name='new_role',
            new_name='role',
        ),
        # Make the role field required
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='users', to='users.userrole'),
        ),
    ]
